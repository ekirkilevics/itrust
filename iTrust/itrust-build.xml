<!--

This sample build demonstrates a simple ant build that compiles and tests
code and uses the jazz coverage toolkit to publish a coverage report.

The build file must be invoked by the jazz build engine.

Prerequisites:

1. Create a new Ant build definition in Jazz. Set the build file field on the Ant page 
to this build file.
 
2. You must download the eclipse JDT standalone compiler (ecj.jar) to use this build file.
Find it in the eclipse.org platform downloads. Look for "JDT Core Batch Compiler"

3. You must update the antArgs property in the build definition properties, 
to point to your location of ecj.jar. For example, assuming you saved ecj.jar to C:\,
you would set the antArgs to:
-lib C:\ecj.jar -lib C:\jazz\buildsystem\buildtoolkit

4. You must update the junitJar property in this build file to point at a junit.jar. 
To get junit.jar, you can use the one from an eclipse installation (eclipse\plugins\junit...)
or download it from junit.org.

5. You must update the buildToolkit property in this build file to point to the build toolkit directory. 

-->

<project name="itrust-ant-build" default="all">

	<!-- Path to junit.jar. Update this property to point at a valid junit.jar. -->
	<property name="junitJar" value="C:\Jazz Client with WTP v1.0M6a\Jazz Client with WTP v1.0M6a\jazz\client\eclipse\plugins\org.junit_3.8.2.v200706111738\junit.jar" />

	<!-- Path to build toolkit. Update this property to point to the build toolkit directory. -->
	<property name="buildToolkit" value="C:\Jazz Client with WTP v1.0M6a\Jazz Client with WTP v1.0M6a\jazz\buildsystem\buildtoolkit" />

	<!-- Path to the coverage working directory. -->
	<property name="coverageDir" value= "${basedir}/coverage" />
	
	<!-- Path to the compile output log. -->
	<property name="compileLog" value="${basedir}/compile.xml" />

	<!-- URL of the build server. Update this property to point to your location where you store additional build artifacts. -->
	<property name="buildServer" value="http://localhost:8080" />

	<!-- Typically, you should not use ADMIN, but instead
	     define a special build user. -->
	<property name="userId" value="itrust-build" />
	<property name="password" value="tazrocks" />

	<target name="all" depends="checkEnv, runBuild" />

	<target name="runBuild" depends="init, compile, test">
		<echo message="Build ${buildDefinitionId} completed." />
	</target>

	<target name="init">

		<!-- Path of the coverage analysis file. This file will be zipped and published as coverage report. -->
		<property name= "analysisFile" value= "${coverageDir}/coverage.analysis" />
		
		<!-- Path to the coverage summary file. This file will be zipped and published as coverage summary for the build result. -->
		<property name= "summaryFile" value= "${coverageDir}/coverage.summary" />

		<!-- Various paths used while generating coverage reports. -->
		<property name="zippedReportDownload" value="Coverage-${buildDefinitionId}.zip" />
		<property name="zippedReportFile" value="${coverageDir}/${zippedReportDownload}"/>
		<property name="zippedAnalysisFile" value="${coverageDir}/Analysis-${buildDefinitionId}.zip"/>
		<property name="reportDir" value="${coverageDir}/report"/>
		<property name="reportIndex" value="${reportDir}/index.html"/>
		<property name="instrumented" value="${coverageDir}/instrumented"/>
		
		<!--Paths of the Emma meta-data and coverage data files. -->
		<property name="metaFile" value= "${coverageDir}/coverage.em" />
		<property name="traceFile" value= "${coverageDir}/coverage.ec" />

		<!-- VM arguments to pass to the VM executing the JUnit tests. -->
		<property name="outVMArgument" value="-Drt.control=true -Drt.control.host=${buildServer} -Drt.control.port=47653 -Demma.coverage.out.file=${traceFile}" />
		<property name="bootVMArgument" value="-Xbootclasspath/a:${buildToolkit}/emma.jar"/>

	</target>

	<target name="compile">
		<!-- Update the build progress in Jazz by setting the currentActivityLabel. -->
		<!-- <buildResultPublisher currentActivityLabel="compiling..." buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${userId}" password="${password}" /> 
		-->

		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />

		<property name="destdir" value="${basedir}/bin" />

		<delete dir="${destdir}" />
		<mkdir dir="${destdir}" />

		<javac srcdir="${basedir}/src" destdir="${destdir}" source="1.5" target="1.5" debug="on" nowarn="on" failonerror="false">

			<classpath>
				<pathelement path="${junitJar}" />
			</classpath>

			<compilerarg line="-1.5 -log ${compileLog}" />
		</javac>

		<!-- Publish the compile log to Jazz. -->
		<jdtCompileLogPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${userId}" password="${password}" filePath="${compileLog}" />

		<jar basedir="${destdir}" destfile="${basedir}/hello.jar" />

		<!-- Publish some downloadable artifacts. Files published with the 
		     artifactFilePublisher are shown on the Downloads tab of the build
		     result editor. -->

		<artifactFilePublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${userId}" password="${password}" verbose="true" filePath="${basedir}/hello.jar" label="The hello jar" />
	</target>

	<target name="test">

		<!-- Instrument code to get coverage results while running tests -->
		<antcall target="instrumentCode" />

		<!-- Update the build progress in Jazz by setting the currentActivityLabel. -->
		<buildResultPublisher currentActivityLabel="testing..." buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${userId}" password="${password}" />

		<junit showoutput="true" fork="yes" >
			<jvmarg value="${bootVMArgument}" />
			<jvmarg value="${outVMArgument}" />
			<formatter type="xml" />
			<test name="hello.test.HelloTest" outfile="HelloTest" />

			<classpath>
				<pathelement path="${basedir}/hello.jar" />
				<pathelement path="${junitJar}" />
			</classpath>
		</junit>

		<!-- Publish the raw junit log. -->
		<logPublisher buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${userId}" password="${password}" filePath="HelloTest.xml" label="Raw JUnit log" />

		<!-- Publish the JUnit log to Jazz. JUnit results published in this way are
			 shown on the JUnit tab of the build result editor. You must use the
			 junit task's formatter type=xml to get a junit xml log for publishing. -->
		<junitLogPublisher filePath="HelloTest.xml" buildResultUUID="${buildResultUUID}" repositoryAddress="${repositoryAddress}" userId="${userId}" password="${password}" />
		
		<!-- Generate the coverage reports. -->
		<antcall target="createReports" />
	</target>


	<target name="checkEnv">
		<fail message="The repositoryAddress property must be defined." unless="repositoryAddress" />
		<echo message="Using repositoryAddress = ${repositoryAddress}" />

		<fail message="The userId property must be defined." unless="userId" />
		<echo message="Using userId = ${userId}" />

		<fail message="The password property must be defined." unless="password" />
		<!-- Don't echo the password. -->

		<fail message="The buildDefinitionId property must be defined." unless="buildDefinitionId" />
		<echo message="Using buildDefinitionId = ${buildDefinitionId}" />

		<fail message="The junitJar property must be defined." unless="junitJar" />
		<echo message="Using junitJar = ${junitJar}" />

		<fail message="The buildServer property must be defined." unless="buildServer" />
		<echo message="Using buildServer = ${buildServer}" />

		<fail message="The buildToolkit property must be defined." unless="buildToolkit" />
		<echo message="Using buildToolkit = ${buildToolkit}" />

		<available file="${buildToolkit}" type="dir" property="buildToolkitFound" />
		<fail message="The directory ${buildToolkit} does not exist. You must define the buildToolkit property to point at your location of the Jazz build toolkit directory." unless="buildToolkitFound" />

		<available file="${junitJar}" property="junitJarFound" />
		<fail message="junit.jar not found at ${junitJar}. You must define the junitJar property to point at your location of junit.jar. To get junit.jar, you can use the one from an eclipse installation (eclipse\plugins\junit...) or download it from junit.org." unless="junitJarFound" />
	</target>

	<target name="instrumentCode">
		<buildResultPublisher buildResultUUID="${buildResultUUID}"
			                      repositoryAddress="${repositoryAddress}"
			                      userId="${userId}"
			                      password="${password}"
			                      currentActivityLabel="preparing tests..." />

		<property name="destdir" value="${basedir}/bin" />
		<path id="buildtoolkit.lib" >
			<fileset dir="${buildToolkit}" />
		</path>

		<!-- Declare the coverage instrumentation tasks we will need. -->
		<!-- commented out not in use -->
		<!-- taskdef name="coverage" classname="com.ibm.team.coverage.common.coverageTask" classpathref="buildtoolkit.lib" />
		<taskdef name="instr" classname="com.vladium.emma.instr.instrTask" classpathref="buildtoolkit.lib" / -->

		<!-- Instrument all class files in the destination directory and update the Emma meta-data. -->
		<coverage>
			<instr mode="overwrite" merge="yes" metadatafile="${metaFile}" verbosity="verbose">
				<!-- Exclude any JDK classes. -->
				<filter excludes="java.*, javax.*" />
				<instrpath>
					<!-- Include everything in the project output folder. -->
					<dirset dir="${destdir}" includes="**/*"/>
				</instrpath>
			</instr>
		</coverage>
	</target>

	<target name="createReports">
		<mkdir dir="${reportDir}" />
		<buildResultPublisher buildResultUUID="${buildResultUUID}"
			                      repositoryAddress="${repositoryAddress}"
			                      userId="${userId}"
			                      password="${password}"
			                      currentActivityLabel="creating coverage report..." />

		<path id="buildtoolkit.lib" >
			<fileset dir="${buildToolkit}" />
		</path>
		
		<!-- Declare the coverage reporting tasks we will need. -->
		<!-- commented out not in use -->
		<!-- taskdef name="report" classname="com.vladium.emma.report.reportTask" classpathref="buildtoolkit.lib" />
		<taskdef name="coverage" classname="com.ibm.team.coverage.common.coverageTask" classpathref="buildtoolkit.lib" />
		<taskdef name="analysis" classname="com.ibm.team.coverage.common.analysisTask" classpathref="buildtoolkit.lib" / -->
		
		<dirset id="project.dirs" dir="${basedir}" includes="*" />
		
		<!-- Create the requested coverage reports. -->
		<coverage>
			<!-- Create a HTML report from the collected meta-data and coverage data. -->
			<report units="instr" depth="method" columns="name, class, method, block, line" sort="+name,+class,+method,+block" metrics="method:70,block:80,line:80,class:100" sourcepath="${basedir}/src" verbosity="verbose">
				<infileset dir="${coverageDir}" includes="*.em, *.ec"/>
				<html outfile="${reportIndex}"/>
			</report>
			<!-- Create a Jazz coverage analysis and coverage summary. -->
			<analysis projectsref="project.dirs" flags="0" sourcepath="${basedir}/src" outfile="${analysisFile}" summaryFile="${summaryFile}" verbosity="verbose">
				<infileset dir="${coverageDir}" includes="*.em, *.ec"/>
			</analysis>
		</coverage>
		<!-- Zip the files. -->
		<zip destfile="${zippedReportFile}" basedir="${reportDir}" />
		<zip destfile="${zippedAnalysisFile}">
			<fileset file="${analysisFile}" />
		</zip>

		<!-- Publish the created reports. -->
		<antcall target="publishReports" />
	</target>

	<target name="publishReports">

		<!-- Create a publish destination directory. This directory will hold the published report for the particular build. -->
		<property name="publishDestination" value="${basedir}/${buildDefinitionId}/${buildId}" />
		<mkdir dir="${publishDestination}" />
		
		<!-- Copy the HTML coverage report to the publish destination. -->
		<copy todir="${publishDestination}"
	      	file="${zippedReportFile}"
	      	verbose="true"
	      	overwrite="true"
	      	failonerror="false" />

		<!-- Publish the HTML coverage report. This report will be available in the downloads tab of the Jazz build result editor. -->
		<artifactLinkPublisher buildResultUUID="${buildResultUUID}"
		   repositoryAddress="${repositoryAddress}"
		   userId="${userId}"
		   password="${password}"
           verbose="true"
           label="Coverage Report for ${buildId}"
           url="${publishDestination}/${zippedReportDownload}" 
		   failOnError="false"/>

		<!-- Publish the coverage analysis report. This report will be shown in a separate tab in the Jazz build result editor. -->
		<filePublisher buildResultUUID="${buildResultUUID}"
	                  repositoryAddress="${repositoryAddress}"
			          userId="${userId}"
			          password="${password}"
					  contributionTypeId="com.ibm.team.build.coverage"
		              verbose="true"
	    	          filePath="${zippedAnalysisFile}"
	        	      label="Coverage Report"
	            	  failOnError="false" />

		<!-- Publish the coverage summary. This information will be used in the Jazz build result editor for the coverage overview. 
		This step is optional and can be omitted. -->
		<filePublisher buildResultUUID="${buildResultUUID}"
	                  repositoryAddress="${repositoryAddress}"
			          userId="${userId}"
			          password="${password}"
					  contributionTypeId="com.ibm.team.build.summary"
		              verbose="true"
	    	          filePath="${summaryFile}"
	        	      label="Coverage Summary"
	            	  failOnError="false" />
	</target>

	<!-- These task definitions make the Jazz ant tasks available to this build file.
	     In order to find these classnames at run time, ant must be invoked with:
	
		     -lib <buildsystem-location>/buildtoolkit
	 -->
	<!-- commented out not in use -->
	<!-- taskdef name="artifactFilePublisher" classname="com.ibm.team.build.ant.task.ArtifactFilePublisherTask" />
	<taskdef name="artifactLinkPublisher" classname="com.ibm.team.build.ant.task.ArtifactLinkPublisherTask" />
	<taskdef name="buildResultPublisher" classname="com.ibm.team.build.ant.task.BuildResultPublisherTask" />
	<taskdef name="filePublisher" classname="com.ibm.team.build.ant.task.FilePublisherTask" />
	<taskdef name="jdtCompileLogPublisher" classname="com.ibm.team.build.ant.task.JdtCompileLogPublisherTask" />
	<taskdef name="junitLogPublisher" classname="com.ibm.team.build.ant.task.JUnitLogPublisherTask" />
	<taskdef name="linkPublisher" classname="com.ibm.team.build.ant.task.LinkPublisherTask" />
	<taskdef name="logPublisher" classname="com.ibm.team.build.ant.task.LogPublisherTask" / -->

</project>